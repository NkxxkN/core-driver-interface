- All output will be considered a 200 http response code.
- If 500 is returned output may be "Internal Error" or {errorMessage: string}.
- If 404 is returned, output will always be "Not Found"
- If 405 is returned, output will always be "Method not supported"
- If 400 is returned, output will be "Invalid Json Input" or something else depending on the API
- All Json output will have "Content-Type" header as "application/json; charset=UTF-8"
- deviceDriverInfoType = {
    frontendSDK: {
        name: string,
        version: string
    }[],
    driver: {
        name: string,
        version: string
    }
}
- JsonObject is a non-stringified Json object (not json primitive or array). 
An example is {
    someKey: "someValue"
}

-----------------------------------------------------------------------

Name: Hello
URL: /hello
Methods: GET, PUT, DELETE, POST
Input: ""
Output: "Hello"

-----------------------------------------------------------------------

Name: Create new session
URL: /session
Methods: POST
Input: {
    userId: string,
    userDataInJWT: JsonObject,
    userDataInDatabase: JsonObject,
    deviceDriverInfo: deviceDriverInfoType
}
Output: {
    status: "OK",
    session: {
        handle: string,
        userId: string,
        userDataInJWT: JsonObject
    },
    accessToken: {
        token: string,
        expiry: number,
        createdTime: number,
        cookiePath: string,
        cookieSecure: boolean,
        domain: string,
        sameSite: string
    },
    refreshToken: {
        token: string,
        expiry: number,
        createdTime: number,
        cookiePath: string,
        cookieSecure: boolean,
        domain: string,
        sameSite: string
    },
    idRefreshToken: {
        token: string,
        expiry: number,
        createdTime: number,
        cookiePath: string,
        cookieSecure: boolean,
        domain: string,
        sameSite: string
    },
    antiCsrfToken: string | undefined,
    jwtSigningPublicKey: string,
    jwtSigningPublicKeyExpiryTime: number
}

-----------------------------------------------------------------------

Name: Verify session
URL: /session/verify
Methods: POST
Input: {
    accessToken: string,
    antiCsrfToken: string | undefined,
    doAntiCsrfCheck: boolean,
    deviceDriverInfo: deviceDriverInfoType
}
Output: {
    status: "OK",
    session: {
        handle: string,
        userId: string,
        userDataInJWT: JsonObject
    },
    accessToken: {
        token: string,
        expiry: number,
        createdTime: number,
        cookiePath: string,
        cookieSecure: boolean,
        domain: string,
        sameSite: string
    } | undefiend,
    jwtSigningPublicKey: string,
    jwtSigningPublicKeyExpiryTime: number
} | {
    status: "TRY_REFRESH_TOKEN",
    message: string
} | {
    status: "UNAUTHORISED",
    message: string
}

-----------------------------------------------------------------------

Name: Refresh session
URL: /session/refresh
Methods: POST
Input: {
    refreshToken: string,
    deviceDriverInfo: deviceDriverInfoType
}
Output: {
    status: "OK",
    session: {
        handle: string,
        userId: string,
        userDataInJWT: JsonObject
    },
    accessToken: {
        token: string,
        expiry: number,
        createdTime: number,
        cookiePath: string,
        cookieSecure: boolean,
        domain: string,
        sameSite: string
    },
    refreshToken: {
        token: string,
        expiry: number,
        createdTime: number,
        cookiePath: string,
        cookieSecure: boolean,
        domain: string,
        sameSite: string
    },
    idRefreshToken: {
        token: string,
        expiry: number,
        createdTime: number,
        cookiePath: string,
        cookieSecure: boolean,
        domain: string,
        sameSite: string
    },
    antiCsrfToken: string | undefined
} | {
    status: "UNAUTHORISED",
    message: string,
} | {
    status: "TOKEN_THEFT_DETECTED",
    session: {
        handle: string,
        userId: string
    }
}

-----------------------------------------------------------------------

Name: Deleting sessions
URL: /session
Methods: DELETE
Input: {
    sessionHandle: string   // delete one session
} | {
    sessionHandles: string[]    // delete all of these sessions
} | {
    userId: string  // delete all sessions associated with this userId
}
Output: {
    status: "OK",
    numberOfSessionsRevoked: number
}

-----------------------------------------------------------------------

Name: Get session data stored in db
URL: /session/data
Methods: GET
Query: 
sessionHandle: string

Output: {
    status: "OK",
    userDataInDatabase: JsonObject
} | {
    status: "UNAUTHORISED",
    message: string,
}

-----------------------------------------------------------------------

Name: Update session data stored in db
URL: /session/data
Methods: PUT
Input: {
    sessionHandle: string,
    userDataInDatabase: JsonObject
}

Output: {
    status: "OK"
} | {
    status: "UNAUTHORISED",
    message: string,
}

-----------------------------------------------------------------------

Name: Get all session handles for user
URL: /session/user
Methods: GET
Query:
userId: string,

Output: {
    status: "OK",
    sessionHandles: string[]
}

-----------------------------------------------------------------------

Name: Get config path for currently loaded config
URL: /config
Methods: GET
Query: 
pid: string,

Output: {
    status: "OK",
    path: string
} | {
    status: "NOT ALLOWED",
}

-----------------------------------------------------------------------

Name: Handshake
URL: /handshake
Methods: POST
Input: {
    deviceDriverInfo: deviceDriverInfoType
}
Output: {
    status: "OK",
    jwtSigningPublicKey: string,
    cookieDomain: string,
    cookieSecure: boolean,
    cookieSameSite: string,
    accessTokenPath: string,
    refreshTokenPath: string,
    idRefreshTokenPath: string,
    enableAntiCsrf: boolean,
    accessTokenBlacklistingEnabled: boolean,
    jwtSigningPublicKeyExpiryTime: long
}

-----------------------------------------------------------------------

Name: Get Dev production mode currently running process
URL: /devproductionmode
Methods: GET
Query: 
pid: string,

Output: {
    status: "OK",
    mode: "DEV" | "PRODUCTION"
} | {
    status: "NOT ALLOWED",
}